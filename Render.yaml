# Render.com deployment configuration for System Control Dashboard
services:
  - type: web
    name: system-control-dashboard
    env: python
    repo: https://github.com/yourusername/system-control-dashboard.git
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
    startCommand: |
      python -m gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:$PORT server_dashboard:app
    
    # Environment variables
    envVars:
      - key: FLASK_ENV
        value: production
      
      - key: SECRET_KEY
        generateValue: true
        # Or set manually for consistency across deployments
        # value: your-super-secret-key-here
      
      - key: AGENT_TOKEN
        generateValue: true
        # This should match the token used by your clients
      
      - key: ADMIN_USERNAME
        value: admin
      
      - key: ADMIN_PASSWORD
        value: your-secure-admin-password-here
      
      # Database settings
      - key: DATABASE_PATH
        value: /opt/render/project/src/dashboard.db
      
      # Upload settings
      - key: UPLOAD_FOLDER
        value: /opt/render/project/src/uploads
      
      # Session settings
      - key: SESSION_TIMEOUT
        value: "3600"
      
      - key: SESSION_COOKIE_SECURE
        value: "true"
      
      # Client settings
      - key: CLIENT_TIMEOUT
        value: "300"
      
      - key: MAX_CLIENTS
        value: "100"
      
      - key: HEARTBEAT_INTERVAL
        value: "30"
      
      # SocketIO settings
      - key: SOCKETIO_PING_TIMEOUT
        value: "60"
      
      - key: SOCKETIO_PING_INTERVAL
        value: "25"
      
      - key: SOCKETIO_CORS_ALLOWED_ORIGINS
        value: "*"
      
      # Data retention
      - key: BACKUP_RETENTION_DAYS
        value: "30"
      
      - key: LOG_RETENTION_DAYS
        value: "7"
      
      - key: COMMAND_RETENTION_DAYS
        value: "14"
      
      # Security settings
      - key: FORCE_HTTPS
        value: "true"
      
      # Logging
      - key: LOG_LEVEL
        value: INFO
      
      - key: LOG_FILE
        value: /opt/render/project/src/dashboard.log
      
      # Background tasks
      - key: CLEANUP_INTERVAL
        value: "300"
      
      - key: HEALTH_CHECK_INTERVAL
        value: "60"
      
      # Optional: Webhook for notifications
      # - key: WEBHOOK_URL
      #   value: https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
      
      # Optional: Email notifications
      # - key: EMAIL_SMTP_SERVER
      #   value: smtp.gmail.com
      # - key: EMAIL_SMTP_PORT
      #   value: "587"
      # - key: EMAIL_USERNAME
      #   value: your-email@gmail.com
      # - key: EMAIL_PASSWORD
      #   value: your-app-password
      # - key: NOTIFICATION_EMAIL
      #   value: admin@yourcompany.com
    
    # Health check settings
    healthCheckPath: /api/health
    
    # Auto-deploy settings
    autoDeploy: true
    branch: main
    
    # Resource allocation
    plan: starter  # or 'standard' or 'pro' based on your needs
    
    # Persistent disk for database and uploads
    disk:
      name: dashboard-data
      mountPath: /opt/render/project/src
      sizeGB: 10

# Additional services (optional)
  # Redis service for session storage and caching (if needed)
  # - type: redis
  #   name: dashboard-redis
  #   plan: starter
  #   maxmemoryPolicy: allkeys-lru

# Database service (if you prefer PostgreSQL over SQLite)
  # - type: pserv
  #   name: dashboard-postgres
  #   env: postgres
  #   plan: starter
  #   databases:
  #     - name: dashboard_db
  #       user: dashboard_user

# Environment-specific configurations
environments:
  production:
    # Production-specific settings
    envVars:
      - key: FLASK_ENV
        value: production
      - key: DEBUG
        value: "false"
      - key: LOG_LEVEL
        value: INFO
  
  staging:
    # Staging-specific settings
    envVars:
      - key: FLASK_ENV
        value: development
      - key: DEBUG
        value: "true"
      - key: LOG_LEVEL
        value: DEBUG

# Build settings
buildCommand: |
  echo "Installing dependencies..."
  pip install --upgrade pip setuptools wheel
  pip install -r requirements.txt
  echo "Creating necessary directories..."
  mkdir -p uploads
  mkdir -p logs
  echo "Setting up database..."
  python -c "from server_dashboard import db_manager; print('Database initialized')"
  echo "Build completed successfully!"

# Start command with proper worker configuration
startCommand: |
  echo "Starting System Control Dashboard..."
  echo "Environment: $FLASK_ENV"
  echo "Port: $PORT"
  python -c "from config import validate_config, print_config_summary; validate_config(); print_config_summary()"
  exec gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:$PORT --timeout 120 --keepalive 2 --max-requests 1000 --max-requests-jitter 100 server_dashboard:app

# Health check configuration
healthCheck:
  path: /api/health
  intervalSeconds: 30
  timeoutSeconds: 10
  unhealthyThresholdCount: 3
  healthyThresholdCount: 2

# Scaling configuration
autoscaling:
  minInstances: 1
  maxInstances: 3
  targetCPUPercent: 70
  targetMemoryPercent: 80

# Custom domains (optional)
# customDomains:
#   - name: dashboard.yourcompany.com
#     type: apex
#   - name: control.yourcompany.com
#     type: subdomain

# Cron jobs for maintenance tasks (optional)
# cronjobs:
#   - name: cleanup-old-data
#     schedule: "0 2 * * *"  # Daily at 2 AM
#     command: python -c "from server_dashboard import db_manager; db_manager.cleanup_old_data()"
#   
#   - name: generate-reports
#     schedule: "0 6 * * 1"  # Weekly on Monday at 6 AM
#     command: python scripts/generate_weekly_report.py